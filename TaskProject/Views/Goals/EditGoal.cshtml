@model TaskProject.Models.GoalModels.Goal

@{
    Layout = null;
}

<form asp-action="EditGoal" class="form-modal">

    @Html.AntiForgeryToken()

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <input type="hidden" asp-for="GoalId" />
    <input type="hidden" asp-for="UserId" />
    <input type="hidden" asp-for="IsComplete" />
    <input type="hidden" asp-for="FinishCount" />

    <div class="form-group">
        <label asp-for="Name" class="control-label"></label>
        <input asp-for="Name" class="form-control" maxlength="50" onkeydown="keydownenter(event)" /> 
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <textarea asp-for="Description" class="form-control" rows="5" maxlength="250" style="resize:none"></textarea>
    </div>

    <div class="form-group">
            @Html.LabelFor(model => model.RepeatId, "Повторение", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownListFor(g => g.RepeatId, (IEnumerable<SelectListItem>)ViewBag.RepeateId, new { @class = "form-control" })
    </div>

    <div class="input-group mb-2">
        <div class="col-md-6 col-12 GoalStart">
            <div>
                @Html.LabelFor(model => model.GoalStart, htmlAttributes: new { @class = "control-label" })
            </div>

            <div class="input-group date" id="GoalStart" data-target-input="nearest">
                <input type="text" name="GoalStart" class="form-control datetimepicker-input" data-target="#GoalStart" value="@Model.GoalStart.Value.ToString("dd.MM.yyyy HH:mm")"/>
                <div class="input-group-append" data-target="#GoalStart" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
                <span asp-validation-for="GoalStart" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-6 col-12 GoalEnd">
            <div>
                @Html.LabelFor(model => model.GoalEnd, htmlAttributes: new { @class = "control-label" })
            </div>       
            <div class="input-group date" id="GoalEnd" data-target-input="nearest">
                @if (Model.GoalEnd.HasValue)
                {
                    <input type="text" name="GoalEnd" class="form-control datetimepicker-input" data-target="#GoalEnd" value="@Model.GoalEnd.Value.ToString("dd.MM.yyyy HH:mm")"/>
                }
                else
                {
                    <input type="text" name="GoalEnd" class="form-control datetimepicker-input" data-target="#GoalEnd"/>
                }
                <div class="input-group-append" data-target="#GoalEnd" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
            @Html.LabelFor(model => model.ComplicationId, "Сложность", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("ComplicationId", (IEnumerable<SelectListItem>)ViewBag.ComplocationId, new { @class = "form-control" })
    </div>

    <div class="form-group">
            @Html.LabelFor(model => model.SkillId, "Навык", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("SkillId", (IEnumerable<SelectListItem>)ViewBag.SkillId, new { @class = "form-control" })
    </div>

    <div class="form-group">
            @Html.LabelFor(model => model.CatalogId, "Список", htmlAttributes: new { @class = "control-label" })
            @Html.DropDownList("CatalogId", (IEnumerable<SelectListItem>)ViewBag.CatalogId, new { @class = "form-control" })
    </div>
</form>


<script>
    $('#GoalStart').datetimepicker({
        locale: 'ru'
    });
    $('#GoalEnd').datetimepicker({
        locale: 'ru',
        useCurrent: false //Important! See issue #1075
    });
    $("#GoalStart").on("change.datetimepicker", function (e) {
        $('#GoalEnd').datetimepicker('minDate', e.date);
    });
    $("#GoalEnd").on("change.datetimepicker", function (e) {
        $('#GoalStart').datetimepicker('maxDate', e.date);
    });
</script>
<script>
    $(document).ready(function () {
        CheckRepeate($("#RepeatId").val());

        $('#RepeatId').change(function () {
            CheckRepeate($(this).val());
        });

        function CheckRepeate(id) {
            if (id === "0") {
                $(".GoalStart").css("display", "none");
                $(".GoalEnd").css("display", "none");
            }
            else if (id === "1") {
                $(".GoalStart").css("display", "block");
                $(".GoalEnd").css("display", "block");
            }
            else {
                $(".GoalStart").css("display", "block");
                $(".GoalEnd").css("display", "none");
            }

        };
    });
</script>